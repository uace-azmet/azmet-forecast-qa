---
title: "README"
format: gfm
---
<!-- README.md is generated from README.qmd. Please edit that file -->

# azmet-qaqc

<!-- badges: start -->
<!-- badges: end -->

This repository contains code to perform quality assurance checks on [AZMET](https://ag.arizona.edu/azmet/) meterological data.  Daily and hourly resolution data is accessed via the [`azmetr`](https://github.com/cct-datascience/azmetr) R package. The resulting QA report is viewable here: https://viz.datascience.arizona.edu/azmet-qaqc/

This report has two types of validations: 1) rule-based validations and 2) forecast-based validations.  Rule-based validations check if values are within ranges, are correct relative to one another, and are not out of range for certain numbers of observations.  Forecast-based validations start with creating a timeseries model of the data back to 2003.  These models are updated and used to forecast the current day.  The observed data is then compared to the forecast data, and if they are very different the data is flagged.

## Reproducibility

This project uses [`renv`](https://rstudio.github.io/renv/articles/renv.html) for package management. When opening this repo as an RStudio Project for the first time, `renv` should automatically install itself and prompt you to run `renv::restore()` to install all package dependencies.

This project uses the [`targets` package](https://docs.ropensci.org/targets/) for workflow management. Run `targets::tar_make()` from the console to run the workflow and reproduce all results.  To reproduce the last step that updates the forecast dataset "pin" on Connect, you'll need to create a .Renviron file with 

```
CONNECT_SERVER="https://viz.datascience.arizona.edu/"
CONNECT_API_KEY=<your API key>
```

And you must have permission to publish to that pin.  Without this setup, other targets should still run and you can inspect results of each step with `tar_read()`.

**Targets workflow:**

```{r echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
cat(
  "```mermaid",
  targets::tar_mermaid(targets_only = FALSE),
  "```",
  sep = "\n"
)
#this should display correctly on GitHub, or code can be pasted into https://mermaid.live
```


## Repo Structure

```{r}
fs::dir_tree(recurse = 1)
```
- `R/` contains functions used in the `targets` pipeline.
- `_targets` is generated by `targets::tar_make()` and only the metadata of the targets pipeline is on GitHub.
- `_targets.R` defines a `targets` workflow
- `_targets_packages.R` is generated by `targets::tar_renv()`
- `app/` contains shiny-report.qmd and files generated by rendering it.  This is the interactive QA report published to Connect.  It is independent of the `targets` pipeline.
- `data/` contains the .csv file of the historic data (since 2003)
- `notes/` contains quarto documents of notes / analysis.  `sliding-windows.qmd` is an exploration of a sliding-window quantile approach that is probably not going to work for us.  `azmet-qaqc.qmd` is an exploration of QA by forecasting.
- `renv/` and `renv.lock` are necessary for the `renv` package to work (see above)
- `run.R` is for conveniently running `tar_make()` as a background job.  Created by `targets::use_targets()`
- `wrangling/` contains a script for scraping weather data from 2003 onward that isn't available through the API / the `azmetr` package. This should only need to be run once ever.


## Collaboration guidelines

To contribute to this project, please create a new branch for your changes and make a pull request. One easy way to do this from within R is with the `usethis` package and the `pr_*` functions. `pr_init("branch-name")` begins a new branch locally, `pr_push()` helps you create a new pull request, and after it is merged you can use `pr_finish()` to clean things up. More about this workflow [here](https://usethis.r-lib.org/articles/pr-functions.html).